substitutions:
  device_name: table_display
  upper_device_name: Table Display

esphome:
  name: $device_name
  platform: ESP8266
  board: d1_mini

wifi: !include include/wifi_iot.yaml

captive_portal:

web_server:
  port: 80

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
# api:

ota:
  platform: esphome

mqtt: !include include/mqtt.yaml

time:
  - platform: sntp
    id: esptime
    timezone: America/Detroit
    servers:
      - 192.168.254.118
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      
button:
  - platform: restart
    name: $upper_device_name Restart
    
sensor:

  - platform: mqtt_subscribe
    id: inside_temperature_2
    topic: lr/sht3xd/temperature/state
    filters:
      - lambda: return x * (9.0/5.0) + 32.0;

  - platform: mqtt_subscribe
    id: outside_temperature_2
    topic: outdoor/temperature/state
    filters:
      - lambda: return x * (9.0/5.0) + 32.0;
  
  - platform: wifi_signal
    name: $upper_device_name WiFi Signal
    update_interval: 30min
    icon: mdi:wifi
    
font:
  - file: 'fonts/arial.ttf'
    id: font1
    size: 10

  - file: 'fonts/arial.ttf'
    id: font2
    size: 36

  - file: 'fonts/arial.ttf'
    id: font3
    size: 14
    
i2c:

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    reset_pin: D0
    address: 0x3C
    id: screen 
    pages:
      - id: full_page
        lambda: |-
          // Print title in top center.
          it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Time");
    
          // Print time in HH:MM format
          it.strftime(0, 55, id(font2), TextAlign::BASELINE_LEFT, "%I:%M", id(esptime).now());
    
          // Print inside temperature (from homeassistant sensor)
          if (id(inside_temperature_2).has_state()) {
            it.printf(127, 23, id(font3), TextAlign::TOP_RIGHT , "%.1f°", id(inside_temperature_2).state);
          }
    
          // Print outside temperature (from homeassistant sensor)
          if (id(outside_temperature_2).has_state()) {
            it.printf(127, 60, id(font3), TextAlign::BASELINE_RIGHT , "%.1f°", id(outside_temperature_2).state);
          }
      - id: indoor_temp
        lambda: |-
          // Print Time in top center.
          it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Living Room");
    
          // Print inside temperature (from homeassistant sensor)
          if (id(inside_temperature_2).has_state()) {
            it.printf(0,55, id(font2), TextAlign::BASELINE_LEFT , "%.1f°", id(inside_temperature_2).state);
          }
    
          // Print time in HH:MM format
          it.strftime(127,23 , id(font3), TextAlign::TOP_RIGHT, "%I:%M", id(esptime).now());
    
          // Print outside temperature (from homeassistant sensor)
          if (id(outside_temperature_2).has_state()) {
            it.printf(127, 60, id(font3), TextAlign::BASELINE_RIGHT , "%.1f°", id(outside_temperature_2).state);
          }
      - id: outdoor_temp
        lambda: |-
          // Print Title in top center.
          it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Outdoor");
    
          // Print outside temperature (from homeassistant sensor)
          if (id(outside_temperature_2).has_state()) {
            it.printf(0,55, id(font2), TextAlign::BASELINE_LEFT , "%.1f°", id(outside_temperature_2).state);
          }
    
          // Print inside temperature (from homeassistant sensor)
          if (id(inside_temperature_2).has_state()) {
            it.printf(127, 23, id(font3), TextAlign::TOP_RIGHT , "%.1f°", id(inside_temperature_2).state);
          }
    
          // Print time in HH:MM format
          it.strftime(127,60 , id(font3), TextAlign::BASELINE_RIGHT, "%I:%M", id(esptime).now());
        
interval:
  - interval: 3s
    then:
      - display.page.show_next: screen
      - component.update: screen
