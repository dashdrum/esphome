
# Based on "Configuration as relay with overpower and overtemperature protection"
# from https://www.esphome-devices.com/devices/Shelly-25
# Thanks to Datux modified and tested by gieljnssns

# This project provides an easy automation for a 3-way switch circuit.  The
# public interface reports as a single switch with light on or off, while
# the Shelly 2.5 relays allow the 3-way switch function to operate.

# The built-in power sensors report if the light is on or off, and a template
# switch uses these values to report state.

# The Shelly 2.5 is wired in front of a 3-way switch which is receiving line
# power in the circuit box.  The traveller wires from the switch connect to the
# SW inputs on the Shelly, while the wires heading to the other switch are
# connected to the Output channels.

# One may choose between the ESPHome API and MQTT interfaces

substitutions:
  device_name: shellyswitch25
  upper_device_name: Shelly 3-Way Switch
  mac_address: 00d075f
  timezone: America/Detroit
  channel_1: Relay 1
  channel_2: Relay 2

# These settings may need to be tweaked based on the load
  at_least: "1.9"
  at_most: "2.0"
  max_power: "2000.0"
  max_temp: "70.0"

esphome:
  name: ${device_name}_${mac_address}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    then:
      - binary_sensor.template.publish:
          id: overpowering
          state: OFF
      - binary_sensor.template.publish:
          id: overheating
          state: OFF

wifi: 
  ssid: !secret wifi_iot_ssid
  password: !secret wifi_iot_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $upper_device_name
    password: !secret hotspot_password

captive_portal:

web_server:
  port: 80

# Enable logging
logger:
  level: INFO

api:

# mqtt: 
#   id: mqtt_client
#   broker: !secret mqtt_broker
#   username: !secret mqtt_username
#   password: !secret mqtt_password
#   birth_message:
#     topic: $device_name/availability
#     payload: online
#   will_message:
#     topic: $device_name/availability
#     payload: offline

time:
  - platform: sntp
    id: esptime
    timezone: $timezone
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
      
ota:

i2c:
  sda: GPIO12
  scl: GPIO14

sensor:
  - platform: ade7953_i2c
    irq_pin: GPIO16 # Prevent overheating by setting this
    voltage:
      name: ${device_name}_${mac_address} Voltage
      icon: "mdi:sine-wave"
    # On the Shelly 2.5 channels are mixed ch1=B ch2=A
    current_a:
      id: current_a
      internal: true
    current_b:
      id: current_b
      internal: true
    active_power_a:
      id: power_channel_2
      # active_power_a is normal, so don't multiply by -1
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: shelly_relay_2
            - binary_sensor.template.publish:
                id: overpowering
                state: ON
            ## This Home Assistant service is not available when using MQTT
            - if:
                condition:
                  - wifi.connected:
                then:
                  - homeassistant.service:
                      service: persistent_notification.create
                      data:
                        title: Message from ${device_name}
                      data_template:
                        message: Switch turned off because power exceeded ${max_power}W
                  
        # Power up event.  If the switch is not "ON", turn it on
        - above: ${at_least}
          then:
            - if:
                condition:
                  switch.is_off: three_way_switch
                then:
                  - switch.turn_on: three_way_switch
                  
        # Power down event. IF the switch is not "OFF", turn it off
        - below: ${at_most}
          then:
            - if:
                condition:
                  switch.is_on: three_way_switch
                then:
                  - switch.turn_off: three_way_switch
                        
    active_power_b:
      id: power_channel_1
      # active_power_b is inverted, so multiply by -1
      filters:
        - multiply: -1
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: shelly_relay_1
            - binary_sensor.template.publish:
                id: overpowering
                state: ON
            ## This Home Assistant service is not available when using MQTT
            - if:
                condition:
                  - wifi.connected:
                then:
                  - homeassistant.service:
                      service: persistent_notification.create
                      data:
                        title: Message from ${device_name}
                      data_template:
                        message: Switch turned off because power exceeded ${max_power}W
                  
        # Power up event.  If the switch is not "ON", turn it on
        - above: ${at_least}
          then:
            - if:
                condition:
                  switch.is_off: three_way_switch
                then:
                  - switch.turn_on: three_way_switch
                  
        # Power down event. IF the switch is not "OFF", turn it off
        - below: ${at_most}
          then:
            - if:
                condition:
                  switch.is_on: three_way_switch
                then:
                  - switch.turn_off: three_way_switch
                  
    update_interval: 1s

  - platform: total_daily_energy
    id: total_daily_energy_1
    power_id: power_channel_1
    method: trapezoid 
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kW

  - platform: total_daily_energy
    id: total_daily_energy_2
    power_id: power_channel_2
    method: trapezoid 
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kW

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: ${device_name}_${mac_address} Temperature
    id: device_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - switch.turn_off: shelly_relay_1
          - switch.turn_off: shelly_relay_2
          - binary_sensor.template.publish:
              id: overheating
              state: ON
          ## This Home Assistant service is not available when using MQTT
          - if:
              condition:
                - wifi.connected:
              then:
                - homeassistant.service:
                    service: persistent_notification.create
                    data:
                      title: Message from ${device_name}
                    data_template:
                      message: Switch turned off because temperature exceeded ${max_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    # name: temp_resistance
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    # name: temp_analog
    id: temp_analog_reading
    pin: A0
    
    ## These template sensors report combined values for power, energy, and current 
  - platform: template
    name: ${device_name}_${mac_address} Current
    id: combined_current
    lambda: 'return (id(current_a).state + id(current_b).state);'
    unit_of_measurement: A
    icon: "mdi:current-ac"
    update_interval: 10s
    
  - platform: template
    id: combined_active_power
    name: ${device_name}_${mac_address} Power
    lambda: 'return (id(power_channel_2).state + id(power_channel_1).state);'
    unit_of_measurement: W
    icon: "mdi:flash"
    update_interval: 10s
    
  - platform: template
    id: combined_total_daily_energy
    name: ${device_name}_${mac_address} Energy
    accuracy_decimals: 3
    lambda: 'return (id(total_daily_energy_2).state + id(total_daily_energy_1).state);'
    unit_of_measurement: kW
    icon: "mdi:lightning-bolt"
    update_interval: 10s

  - platform: wifi_signal
    name: ${device_name}_${mac_address} WiFi Signal
    update_interval: 60s

status_led:
  pin:
    number: GPIO0
    inverted: yes

switch:
    # This template switch reports the public state of the switch
  - platform: template
    name: ${device_name}_${mac_address}
    id: three_way_switch
    icon: 'mdi:lightbulb-outline'
    # If power is high, the switch should report on
    lambda: 'return (id(power_channel_1).state > ${at_least} || id(power_channel_2).state > ${at_least});'
    turn_on_action:
      # If the power levels are low, toggle the relay to turn on the light
      - if:
          condition:
            lambda: 'return (id(power_channel_1).state < ${at_most} && id(power_channel_2).state < ${at_most});'
          then:
            - switch.toggle: shelly_relay_1
    turn_off_action:
      # If the power levels are high, toggle the relay to turn off the light
      - if:
          condition:
            lambda: 'return (id(power_channel_1).state > ${at_least} || id(power_channel_2).state > ${at_least});'
          then:
            - switch.toggle: shelly_relay_1
      
  - platform: gpio
    name: ${device_name}_${mac_address} Relay 1
    id: shelly_relay_1
    pin: GPIO4
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
    # Keep relay 2 setting the oppositie of relay 1
    on_turn_on:
    - switch.turn_off: shelly_relay_2
    on_turn_off:
    - switch.turn_on: shelly_relay_2
    
  - platform: gpio
    name: ${device_name}_${mac_address} Relay 2
    id: shelly_relay_2
    pin: GPIO15
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON

binary_sensor:
  - platform: gpio
    name: ${device_name}_${mac_address} Input 1
    icon: 'mdi:light-switch'
    pin:
      number: GPIO13
    id: switch_1
    # Edge switch
    on_state:
      then:
        - switch.toggle: shelly_relay_1
        
  - platform: gpio
    name: ${device_name}_${mac_address} Input 2
    icon: 'mdi:light-switch'
    pin:
      number: GPIO5
    id: switch_2
    # Switch is detached (input is ignored)
    
  - platform: template
    name: ${device_name}_${mac_address} Overheating
    id: overheating
    device_class: problem
    # No lambda here.  The sensor is set to OFF at boot up, and is turned on 
    # when the temp exceeds the limit.
    # Restart required to reset to off
    
  - platform: template
    name: ${device_name}_${mac_address} Overpowering
    id: overpowering
    device_class: problem
    # No lambda here.  The sensor is set to OFF at boot up, and is turned on 
    # when the power usage exceeds the limit.
    # Restart required to reset to off
        
  - platform: status
    name: ${device_name}_${mac_address} status
      
button:
  - platform: restart
    name: ${device_name}_${mac_address} Restart
