substitutions:
  device_name: air_quality
  upper_device_name: Air Quality

esphome:
  name: $device_name

esp32:
  board: wemos_d1_mini32
  framework:
    type: esp-idf

wifi: !include include/wifi_iot.yaml

captive_portal:

web_server:
  port: 80

# Enable logging
logger:
  level: ERROR
#   baud_rate: 0

# Enable Home Assistant API
# api:

ota:
  platform: esphome

mqtt: !include include/mqtt.yaml
      
button:
  - platform: restart
    name: $upper_device_name Restart
    
i2c:

# uart:
#   rx_pin: GPIO3
#   baud_rate: 9600
#   id: uart_1
    
sensor:
#   - platform: pmsx003
#     type: PMSX003
#     uart_id: uart_1
#     pm_1_0:
#       name: "Particulate Matter <1.0µm Concentration"
#     pm_2_5:
#       name: "Particulate Matter <2.5µm Concentration"
#     pm_10_0:
#       name: "Particulate Matter <10.0µm Concentration"
    
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 1min
    expire_after: 90min
    icon: mdi:wifi

  - platform: sgp30
    eco2:
      name: eCO2
      id: eco2
      accuracy_decimals: 0
      filters:
        - delta: 11.0
    tvoc:
      name: TVOC
      id: tvoc
      accuracy_decimals: 0
      filters:
        - delta: 10.0
    address: 0x58
    update_interval: 1s
    compensation:
      temperature_source: temp
      humidity_source: humid
    baseline:
      eco2_baseline: 0x8A4A
      tvoc_baseline: 0x9019
    
  - platform: sht3xd
    temperature:
      name: Temperature
      id: temp
      accuracy_decimals: 2
      expire_after: 60min
      device_class: temperature
    humidity:
      name: Humidity
      id: humid
      icon: mdi:water-percent
      expire_after: 60min
    update_interval: 10min
    
  - platform: template
    id: tempf
    lambda: |-
      if (id(temp).state) {
        return (id(temp).state * 9/5) + 32;
      } else {
        return {};
      }
    update_interval: 10min
    
font:
  - file: 'fonts/arial.ttf'
    id: font1
    size: 12

  - file: 'fonts/arial.ttf'
    id: font2
    size: 24

  - file: 'fonts/arial.ttf'
    id: font3
    size: 10

display:
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    reset_pin: D0
    address: 0x3C
    id: screen 
    pages:
      - id: tvoc_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "TVOC:");
          // Print TVOC value
          if (id(tvoc).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(tvoc).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "ppb");
          }
      - id: eco2_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "eCO2:");
          // Print eCO2 value
          if (id(eco2).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(eco2).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "ppm");
          }
      - id: temp_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "Temp:");
          // Print temperature
          if (id(tempf).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(tempf).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "°F");
          }
      - id: tempc_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "Temp:");
          // Print temperature
          if (id(temp).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(temp).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "°C");
          }
      - id: humid_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "Humidity:");
          // Print Humidity
          if (id(humid).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(humid).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "%");
          }
interval:
  - interval: 2.5s
    then:
      - display.page.show_next: screen
      - component.update: screen