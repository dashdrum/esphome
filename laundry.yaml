substitutions:
  device_name: laundry
  upper_device_name: Laundry

esphome:
  name: $device_name

esp8266:
  board: d1_mini

wifi: !include include/wifi_iot.yaml

captive_portal:

# Enable logging
logger:
  level: WARN

# Enable Home Assistant API
# api:

ota:
  platform: esphome

web_server:
  port: 80

mqtt: !include include/mqtt.yaml

i2c:

globals:
 - id: dryer_ax_min
   type: float
   restore_value: no
   initial_value: '0.0'
 - id: dryer_ax_max
   type: float
   restore_value: no
   initial_value: '100.0'
 - id: dryer_ay_min
   type: float
   restore_value: no
   initial_value: '0.0'
 - id: dryer_ay_max
   type: float
   restore_value: no
   initial_value: '100.0'
 - id: dryer_az_min
   type: float
   restore_value: no
   initial_value: '0.0'
 - id: dryer_az_max
   type: float
   restore_value: no
   initial_value: '100.0'

sensor:
  - !include include/dht22_d4.yaml

  - platform: wifi_signal
    name: $upper_device_name WiFi Signal
    update_interval: 30min
    icon: mdi:wifi
    
  - platform: mpu6050
    address: 0x68
    accel_x:
      id: Ax
    accel_y:
      id: Ay
    accel_z:
      id: Az
    # gyro_x:
    #   name: "MPU6050 Gyro X"
    # gyro_y:
    #   name: "MPU6050 Gyro Y"
    # gyro_z:
    #   name: "MPU6050 Gyro z"
    temperature:
      id: mpu_temp
      name: $upper_device_name MPU Temperature
      filters:
        - sliding_window_moving_average:
            window_size: 2000
            send_every: 9000
        - delta: 0.5
    update_interval: 100ms
    
  - platform: template
    id: intermediate
    lambda:
      if(id(Ax).state > id(dryer_ax_max)) id(dryer_ax_max) = id(Ax).state;
      if(id(Ax).state < id(dryer_ax_min)) id(dryer_ax_min) = id(Ax).state;
      if(id(Ay).state > id(dryer_ay_max)) id(dryer_ay_max) = id(Ay).state;
      if(id(Ay).state < id(dryer_ay_min)) id(dryer_ay_min) = id(Ay).state;
      if(id(Az).state > id(dryer_az_max)) id(dryer_az_max) = id(Az).state;
      if(id(Az).state < id(dryer_az_min)) id(dryer_az_min) = id(Az).state;
      
      return {};
      
    update_interval: 100ms
      
button:
  - platform: restart
    name: $upper_device_name Restart
    
binary_sensor:
  - platform: gpio
    pin: D7
    name: "Dryer Door"
    id: dryer_door
    device_class: door
    filters:
      - delayed_on_off: 20ms
      - invert:
    
  - platform: gpio
    pin: D5
    name: "High Water"
    id: high_water
    device_class: problem
    filters:
      - delayed_on_off: 20ms
      - invert:

  - platform: template
    name: "Dryer State"
    device_class: running
    lambda: |-
    
      const int DRYER_RUNNING = 0;
      const int DRYER_NOT_RUNNING = 1;
      const int UNDEFINED = 32767; // High value
      const int MOTION_NOT_DETECTED = 0;
      const int MOTION_DETECTED = 1;
      const int DRYER_CHECK_MAX_LOW = 3;
      const int DRYER_CHECK_MAX_HIGH = 5;
      const float DRYER_AX_THRESHOLD = 0.15;  
      const float DRYER_AY_THRESHOLD = 0.12;  
      const float DRYER_AZ_THRESHOLD = 1.00;  
      const float MAX = 100.0;
      const float MIN = 0.0;
    
      float dryer_ax_range, dryer_ay_range, dryer_az_range;
      int dryer_reading = UNDEFINED;
      
      static int dryer_check_max = DRYER_CHECK_MAX_HIGH; //  number of times to check values before determining motion - low when running, otherwise higher
      static int dryer_state = UNDEFINED;
      static int last_dryer_state = UNDEFINED;
      static int dryer_check_count = 0;
      static int dryer_motion_count = 0;
      static bool first_time = true;
      static long last_report = millis();
      
      if(last_report > millis()) last_report = millis();
      
      if(millis() - last_report > 3000){
      
        last_report = millis();
      
        if(!first_time) last_dryer_state = dryer_state;
        first_time = false;
        
        dryer_ax_range = id(dryer_ax_max) - id(dryer_ax_min);
        dryer_ay_range = id(dryer_ay_max) - id(dryer_ay_min);
        dryer_az_range = id(dryer_az_max) - id(dryer_az_min);
        
        dryer_reading = MOTION_NOT_DETECTED;
    
        if ((dryer_ax_range > DRYER_AX_THRESHOLD) 
             and (dryer_ay_range > DRYER_AY_THRESHOLD) 
             and (dryer_az_range > DRYER_AZ_THRESHOLD)){
          dryer_reading = MOTION_DETECTED;
        }
        
        dryer_check_count++;
        if (dryer_reading == MOTION_DETECTED){
          dryer_motion_count++;
        }
        
        ESP_LOGI("INFO","Ranges: %.2f %.2f %.2f %d %d", dryer_ax_range, dryer_ay_range, dryer_az_range, dryer_state, dryer_motion_count);
        
        if(dryer_check_count >= dryer_check_max){
          
          if(dryer_motion_count >= (int)(.6*dryer_check_count + 1)){  
            dryer_state = DRYER_RUNNING;
            dryer_check_max = DRYER_CHECK_MAX_LOW;
          }
    
          if(dryer_motion_count <= (int)(.3*dryer_check_count + 1)) { 
            dryer_state = DRYER_NOT_RUNNING;
            dryer_check_max = DRYER_CHECK_MAX_HIGH;
          }
  
          dryer_check_count = 0;
          dryer_motion_count = 0;
        }
        
        id(dryer_ax_min) = MAX;
        id(dryer_ay_min) = MAX;
        id(dryer_az_min) = MAX;
        id(dryer_ax_max) = MIN;
        id(dryer_ay_max) = MIN;
        id(dryer_az_max) = MIN;
          
        if(last_dryer_state != dryer_state){
          last_dryer_state = dryer_state;
          if(dryer_state == DRYER_RUNNING){
            return true;
          } 
          if(dryer_state == DRYER_NOT_RUNNING){
            return false;
          }
        }
      }
      return {};